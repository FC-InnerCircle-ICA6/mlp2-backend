"""Initial schema creation with comments for all tables

Revision ID: a326e836a285
Revises: 
Create Date: 2025-05-28 01:18:21.983950

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a326e836a285'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('certificates',
    sa.Column('id', sa.UUID(), nullable=False, comment='자격증의 고유 식별자'),
    sa.Column('name', sa.String(), nullable=False, comment='자격증 또는 학습 주제의 이름 (고유)'),
    sa.Column('description', sa.Text(), nullable=True, comment='자격증/학습 주제에 대한 설명'),
    sa.Column('difficulty_level', sa.Integer(), nullable=True, comment='자격증의 난이도 (1-5, 5가 가장 어려움)'),
    sa.Column('category', sa.String(), nullable=True, comment='자격증/학습 주제의 분류 (예: "자격증", "어학", "프로그래밍")'),
    sa.Column('is_premium', sa.Boolean(), nullable=False, comment='해당 자격증 관련 콘텐츠가 프리미엄 플랜에 속하는지 여부'),
    sa.PrimaryKeyConstraint('id'),
    comment='서비스에서 제공하는 자격증 또는 주요 학습 주제를 정의합니다.'
    )
    op.create_index(op.f('ix_certificates_name'), 'certificates', ['name'], unique=True)
    op.create_table('subscriptionplans',
    sa.Column('id', sa.UUID(), nullable=False, comment='구독 플랜의 고유 식별자'),
    sa.Column('name', sa.String(), nullable=False, comment='플랜의 이름 (예: "무료 플랜", "월 구독 플랜")'),
    sa.Column('price_per_month', sa.DECIMAL(precision=10, scale=2), nullable=True, comment='월별 구독 가격 (소수점 2자리까지)'),
    sa.Column('features_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='플랜이 제공하는 기능 목록 (JSONB 형식)'),
    sa.Column('fast_test_limit', sa.Integer(), nullable=True, comment='빠른 테스트 생성 시 월별 최대 문항 수 제한'),
    sa.Column('slow_test_limit', sa.Integer(), nullable=True, comment='느린 테스트 생성 시 월별 최대 문항 수 제한'),
    sa.Column('summary_chat_limit_type', sa.String(), nullable=True, comment='학습 요약/채팅 요약 사용 한도 유형 (예: "monthly", "unlimited", "per_credit")'),
    sa.Column('summary_chat_limit_value', sa.Integer(), nullable=True, comment='학습 요약/채팅 요약 사용 한도 값 (예: "monthly" 타입일 경우 10)'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='플랜이 현재 활성화되어 판매 중인지 여부'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    comment='서비스의 다양한 구독 플랜 정보를 정의합니다.'
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False, comment='사용자의 고유 식별자'),
    sa.Column('email', sa.String(), nullable=False, comment='사용자 이메일 주소 (로그인 ID 및 고유 식별자)'),
    sa.Column('password_hash', sa.String(), nullable=False, comment='사용자의 비밀번호 해시 값'),
    sa.Column('name', sa.String(), nullable=False, comment='사용자의 표시 이름'),
    sa.Column('bio', sa.Text(), nullable=True, comment='사용자의 자기소개 또는 간단한 설명'),
    sa.Column('language', sa.String(), nullable=False, comment='사용자 인터페이스 언어 설정 (예: ko, en)'),
    sa.Column('theme', sa.String(), nullable=False, comment='사용자 인터페이스 테마 설정 (예: dark, light)'),
    sa.Column('email_notifications', sa.Boolean(), nullable=False, comment='이메일 알림 수신 여부'),
    sa.Column('push_notifications', sa.Boolean(), nullable=False, comment='푸시 알림 수신 여부'),
    sa.Column('marketing_emails', sa.Boolean(), nullable=False, comment='마케팅 이메일 수신 여부'),
    sa.Column('two_factor_auth_enabled', sa.Boolean(), nullable=False, comment='2단계 인증 활성화 여부'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='사용자 레코드 생성 시간'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='사용자 레코드 마지막 업데이트 시간'),
    sa.PrimaryKeyConstraint('id'),
    comment='사용자 계정 정보를 저장합니다.'
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('learningcontent',
    sa.Column('id', sa.UUID(), nullable=False, comment='학습 콘텐츠의 고유 식별자'),
    sa.Column('certificate_id', sa.UUID(), nullable=True, comment='이 콘텐츠가 속한 자격증의 ID'),
    sa.Column('type', sa.String(), nullable=False, comment='콘텐츠의 유형 (예: "video", "document", "text", "quiz_set")'),
    sa.Column('source_url', sa.String(), nullable=False, comment='콘텐츠의 원본 URL (예: YouTube 영상 링크, 웹사이트 URL)'),
    sa.Column('title', sa.String(), nullable=False, comment='콘텐츠의 제목'),
    sa.Column('description', sa.Text(), nullable=True, comment='콘텐츠에 대한 간단한 설명'),
    sa.Column('raw_text_content', sa.Text(), nullable=True, comment='동영상 트랜스크립트, 문서 내용 등 AI 처리를 위한 원본 텍스트 데이터'),
    sa.Column('processing_status', sa.String(), nullable=False, comment='AI 처리 상태 (예: "PENDING", "PROCESSING", "COMPLETED", "FAILED")'),
    sa.Column('duration_minutes', sa.Integer(), nullable=True, comment='비디오 콘텐츠의 길이 (분)'),
    sa.Column('qdrant_collection_name', sa.String(), nullable=True, comment='이 콘텐츠의 벡터 임베딩이 저장된 Qdrant 컬렉션의 이름'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='콘텐츠 레코드 생성 시간'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='콘텐츠 레코드 마지막 업데이트 시간'),
    sa.ForeignKeyConstraint(['certificate_id'], ['certificates.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('source_url'),
    comment='동영상, 문서, 텍스트 등 실제 학습 자료의 메타데이터를 저장합니다.'
    )
    op.create_table('loginhistory',
    sa.Column('id', sa.UUID(), nullable=False, comment='로그인 기록의 고유 식별자'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='로그인한 사용자의 ID'),
    sa.Column('login_time', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='로그인 발생 날짜 및 시간'),
    sa.Column('ip_address', sa.String(), nullable=True, comment='로그인 시 사용된 IP 주소'),
    sa.Column('device_info', sa.String(), nullable=True, comment='로그인 시 사용된 기기 정보 (예: "iPhone 13", "Windows PC")'),
    sa.Column('location', sa.String(), nullable=True, comment='로그인 발생 위치 (예: "서울, 대한민국")'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    comment='사용자의 로그인 시도 기록을 저장합니다 (보안 및 분석 목적).'
    )
    op.create_table('userquizattempts',
    sa.Column('id', sa.UUID(), nullable=False, comment='사용자 퀴즈 시도의 고유 식별자'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='퀴즈를 시도한 사용자의 ID'),
    sa.Column('certificate_id', sa.UUID(), nullable=True, comment='시도한 모의고사/퀴즈 세트가 속한 자격증의 ID'),
    sa.Column('exam_type', sa.String(), nullable=False, comment='모의고사의 유형 (예: "full", "spreadsheet", "quick", "custom")'),
    sa.Column('start_time', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='퀴즈 시도 시작 시간'),
    sa.Column('end_time', sa.TIMESTAMP(timezone=True), nullable=True, comment='퀴즈 시도 종료 시간'),
    sa.Column('time_taken_seconds', sa.Integer(), nullable=True, comment='퀴즈를 푸는데 소요된 시간 (초 단위)'),
    sa.Column('score', sa.Integer(), nullable=True, comment='퀴즈 시도의 최종 점수 (0-100점)'),
    sa.Column('total_questions', sa.Integer(), nullable=False, comment='시도한 퀴즈 세트의 총 문제 수'),
    sa.Column('correct_count', sa.Integer(), nullable=True, comment='맞춘 문제 수'),
    sa.ForeignKeyConstraint(['certificate_id'], ['certificates.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    comment='사용자가 모의고사나 퀴즈 세트를 시도한 기록을 저장합니다.'
    )
    op.create_table('usersubscriptions',
    sa.Column('id', sa.UUID(), nullable=False, comment='사용자 구독 기록의 고유 식별자'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='구독한 사용자의 ID'),
    sa.Column('plan_id', sa.UUID(), nullable=False, comment='사용자가 구독한 플랜의 ID'),
    sa.Column('start_date', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='구독 시작 날짜 및 시간'),
    sa.Column('end_date', sa.TIMESTAMP(timezone=True), nullable=True, comment='구독 종료 날짜 및 시간 (만료되지 않는 구독은 NULL)'),
    sa.Column('status', sa.String(), nullable=False, comment='구독 상태 (예: "active", "cancelled", "expired", "trial")'),
    sa.Column('credits_remaining', sa.Integer(), nullable=False, comment='크레딧 기반 플랜의 경우 남은 크레딧 수량'),
    sa.Column('last_billing_date', sa.TIMESTAMP(timezone=True), nullable=True, comment='마지막 결제가 발생한 날짜 (정기 결제 플랜용)'),
    sa.ForeignKeyConstraint(['plan_id'], ['subscriptionplans.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    comment='사용자의 현재 구독 정보를 저장합니다.'
    )
    op.create_table('contentsections',
    sa.Column('id', sa.UUID(), nullable=False, comment='콘텐츠 섹션의 고유 식별자'),
    sa.Column('content_id', sa.UUID(), nullable=False, comment='이 섹션이 속한 LearningContent의 ID'),
    sa.Column('section_title', sa.String(), nullable=True, comment='섹션의 제목 (예: 비디오 타임라인 제목)'),
    sa.Column('section_text', sa.Text(), nullable=False, comment='섹션의 실제 텍스트 내용 (예: 비디오 트랜스크립트의 해당 부분)'),
    sa.Column('start_timestamp', sa.String(), nullable=True, comment='비디오의 경우, 섹션의 시작 시간 (예: "00:00")'),
    sa.Column('end_timestamp', sa.String(), nullable=True, comment='비디오의 경우, 섹션의 종료 시간'),
    sa.Column('order_index', sa.Integer(), nullable=False, comment='콘텐츠 내에서 이 섹션의 순서'),
    sa.Column('qdrant_point_id', sa.UUID(), nullable=True, comment='Qdrant 벡터 데이터베이스 내 이 섹션의 벡터 포인트 ID'),
    sa.ForeignKeyConstraint(['content_id'], ['learningcontent.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    comment='긴 학습 콘텐츠를 의미 있는 작은 단위(섹션)로 분할하여 저장합니다.'
    )
    op.create_table('quizzes',
    sa.Column('id', sa.UUID(), nullable=False, comment='퀴즈 문제의 고유 식별자'),
    sa.Column('content_id', sa.UUID(), nullable=True, comment='이 퀴즈가 특정 학습 콘텐츠와 연관된 경우의 ID'),
    sa.Column('certificate_id', sa.UUID(), nullable=True, comment='이 퀴즈가 특정 자격증 모의고사와 연관된 경우의 ID'),
    sa.Column('question_text', sa.Text(), nullable=False, comment='퀴즈의 문제 내용'),
    sa.Column('options_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='객관식 문제의 선택지 목록 (JSONB 형식)'),
    sa.Column('correct_answer_id', sa.String(), nullable=False, comment='정답 선택지의 ID (예: "A", "B")'),
    sa.Column('explanation_text', sa.Text(), nullable=True, comment='문제에 대한 해설 내용'),
    sa.Column('difficulty', sa.String(), nullable=False, comment='퀴즈 문제의 난이도 (예: "easy", "normal", "hard")'),
    sa.Column('question_type', sa.String(), nullable=False, comment='퀴즈 문제의 유형 (예: "multiple" (객관식), "subjective" (주관식), "both" (혼합))'),
    sa.Column('related_materials_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='문제와 관련된 추가 학습 자료 링크 (JSONB 형식)'),
    sa.Column('generated_by_ai', sa.Boolean(), nullable=False, comment='이 문제가 AI에 의해 생성되었는지 여부'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='퀴즈 레코드 생성 시간'),
    sa.ForeignKeyConstraint(['certificate_id'], ['certificates.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['content_id'], ['learningcontent.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    comment='생성된 퀴즈 문제와 정답, 해설 정보를 저장합니다.'
    )
    op.create_table('userlearningprogress',
    sa.Column('id', sa.UUID(), nullable=False, comment='학습 진행 상황 기록의 고유 식별자'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='학습 진행 상황을 추적하는 사용자의 ID'),
    sa.Column('content_id', sa.UUID(), nullable=False, comment='학습 중인 LearningContent의 ID'),
    sa.Column('last_viewed_at', sa.TIMESTAMP(timezone=True), nullable=False, comment='사용자가 해당 콘텐츠를 마지막으로 조회한 시간'),
    sa.Column('progress_percentage', sa.Integer(), nullable=True, comment='콘텐츠의 진행률 (0-100%)'),
    sa.Column('chat_history_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='AI 튜터와의 채팅 기록 (JSONB 형식)'),
    sa.Column('summary_count', sa.Integer(), nullable=False, comment='AI 요약 기능을 사용한 횟수 (플랜 제한과 연동)'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='진행 기록 마지막 업데이트 시간'),
    sa.ForeignKeyConstraint(['content_id'], ['learningcontent.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    comment='사용자의 개별 학습 콘텐츠에 대한 진행 상황을 추적합니다.'
    )
    op.create_table('useranswers',
    sa.Column('id', sa.UUID(), nullable=False, comment='사용자 답변의 고유 식별자'),
    sa.Column('attempt_id', sa.UUID(), nullable=False, comment='이 답변이 속한 사용자 퀴즈 시도의 ID'),
    sa.Column('quiz_id', sa.UUID(), nullable=False, comment='답변한 퀴즈 문제의 ID'),
    sa.Column('user_selected_option_id', sa.String(), nullable=True, comment='사용자가 선택한 객관식 선택지의 ID (예: "A", "B")'),
    sa.Column('is_correct', sa.Boolean(), nullable=False, comment='이 답변이 정답인지 여부'),
    sa.Column('bookmarked', sa.Boolean(), nullable=False, comment='사용자가 이 문제를 북마크했는지 여부 (오답노트, 복습 기능 활용)'),
    sa.Column('submitted_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='답변이 제출된 시간'),
    sa.ForeignKeyConstraint(['attempt_id'], ['userquizattempts.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['quiz_id'], ['quizzes.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    comment='사용자가 각 퀴즈 문제에 대해 제출한 답변을 저장합니다.'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('useranswers')
    op.drop_table('userlearningprogress')
    op.drop_table('quizzes')
    op.drop_table('contentsections')
    op.drop_table('usersubscriptions')
    op.drop_table('userquizattempts')
    op.drop_table('loginhistory')
    op.drop_table('learningcontent')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('subscriptionplans')
    op.drop_index(op.f('ix_certificates_name'), table_name='certificates')
    op.drop_table('certificates')
    # ### end Alembic commands ###
